#compdef bench
#autoload

# Bench ZSH completion function


# completions remain in cache until any tap has new commits
__bench_completion_caching_policy() {
  # there is none
}

__bench_common_commands() {
  local -a commands
  commands=(
    'backup:backup site'
    'mariadb:open mariadb shell'
    'backup-all-sites:backup all sites'
    'config:change bench configuration'
    'disable-production:Disables production environment for the bench'
    'download-translations:Download latest translations'
    'drop-site:Remove a site'
    'exclude-app:Exclude app from updating'
    'get-app:clone an app from the internet and set it up in...'
    'include-app:Include app from updating'
    'init:Create a New Bench Instance'
    'install:Install system dependancies'
    'install-app:Install app'
    'migrate-env:Migrate Virtual Environment to desired Python...'
    'migrate:Run migrations'
    'new-app:start a new app'
    'prepare-beta-release:Prepare major beta release from develop branch'
    'release:Release app (internal to the Frappe team)'
    'remote-reset-url:Reset app remote url to frappe official'
    'remote-set-url:Set app remote url'
    'remote-urls:Show apps remote url'
    'remove-app:completely remove app from bench'
    'renew-lets-encrypt:Renew Lets Encrypt certificate'
    'restart:Restart supervisor processes or systemd units'
    'retry-upgrade:Retry upgrade'
    'set-default-site:Set default site for bench'
    'set-mariadb-host:Set MariaDB host for bench'
    'set-nginx-port:Set nginx port for site'
    'set-ssl-certificate:Set ssl certificate path for site'
    'set-ssl-key:Set ssl certificate private key path for site'
    'set-url-root:Set url root for site'
    'setup:Setup bench'
    'shell:Shell start'
    'src:Prints bench source folder path, which can be used...'
    'start:Start Frappe development processes'
    'switch-to-branch:Switch all apps to specified branch, or specify...'
    'switch-to-develop:Switch frappe and erpnext to develop branch'
    'switch-to-master:Switch frappe and erpnext to master branch'
    'unistall-app:Uninstall an app'
    'update:Update bench'
    'use:Use a different site'
  )
  _describe -t common-commands 'common commands' commands
}

__bench_all_commands() {
  local -a commands
  _describe -t all-commands 'all commands' commands
}

__bench_commands() {
  _alternative \
    'common-commands:command:__bench_common_commands' \
    'all-commands:command:__bench_all_commands'
}

__bench_sites_list() {
  curr_sites=($( ls -l sites | grep '^d' | grep -v 'assets' | awk 'NF{ print $NF }' ))
  _describe -t curr_sites 'current sites' curr_sites
}

__bench_apps_list() {
  curr_apps=($( ls -l apps | grep '^d' | awk 'NF{ print $NF }' ))
  _describe -t curr_apps 'current apps' curr_apps
}

# bench help command
_bench_help() {
  __bench_commands
}

# the main completion function
_bench() {
  local curcontext="$curcontext" state line
  typeset -A opt_args
  local ret=1

  _arguments -C \
    '1: :->subcommand' \
    '--site[Site]:site:__bench_sites_list' \
    '--app[App]:app:__bench_apps_list' \
    '*:: :->args' && ret=0
  
  declare -A cmd_to_func
  cmd_to_func=(
    ['install-app']=__bench_apps_list
    ['uninstall-app']=__bench_apps_list
    ['drop-site']=__bench_sites_list
    ['use']=__bench_sites_list
    ['remove-app']=__bench_apps_list
  )

  case $state in
    subcommand)
      __bench_commands && ret=0
      ;;
    args)
      if [[ -n "${cmd_to_func[$line[1]]}" ]]; then
        # Suggest options from the mapped function
        "${cmd_to_func[$line[1]]}"
      fi
      ;;
  esac

  return ret
}

_bench "$@"
